{"version":3,"sources":["component/AppBar.tsx","apis/request.ts","apis/bitcoin.ts","component/APIStatus.tsx","component/BTCCheck.tsx","apis/litecoin.ts","component/LTCCheck.tsx","apis/ethereum.ts","component/ETHCheck.tsx","apis/bitcoincash.ts","component/BCHCheck.tsx","apis/ripple.ts","component/XRPCheck.tsx","apis/icon.ts","component/ICXCheck.tsx","apis/binance.ts","component/BNBCheck.tsx","apis/horizen.ts","component/ZENCheck.tsx","apis/stellar.ts","component/XLMCheck.tsx","apis/kinesis.ts","component/KA_Check.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppBar","props","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","url","option","a","fetch","res","status","json","result","detail","JSON","stringify","text","toString","request","pre","getBalanceBlockInfo","address","getBalanceOwnNode","init","headers","Accept","authKey","process","getUSDTBalance","paramStr","method","body","console","log","StatusTitle","Heading","textAlign","level","color","StatusText","Text","BTCCheck","useState","setaddress","setStatus","blockchainInfoRes","setBlockchainInfoRes","cbxNodeRes","setCBXNodeRes","omniRes","setOmniRes","useMemo","isCanceled","Promise","all","blockInfo","cbxNode","omniData","Accordion","AccordionPanel","label","TextInput","size","type","value","onChange","e","target","TextArea","disabled","getBalanceCoinSpace","LTCCheck","coinSpaceRes","setCoinSpaceRes","getBalanceEtherscan","getBalanceInfura","id","jsonrpc","params","ETHCheck","infuraRes","setInfuraRes","etherscanRes","setEtherscanRes","BCHCheck","getBalanceGraphQL","query","encodeURIComponent","XRPCheck","response","setReponse","IconAmount","IconService","httpProvider","HttpProvider","iconService","getBalance","execute","loopValue","balance","of","Unit","LOOP","convertUnit","ICX","ICXCheck","setResponse","getBalanceBinanceDex","BNBCheck","bnbRes","getBalanceZenSystem","ZENCheck","testnet","server","Server","accounts","accountId","call","account","balances","find","obj","asset_type","NotFound","XLMCheck","mainnet","setMainnetRes","setTestnetRes","require","NotFoundError","getKAUBalance","getKAGBalance","kauMainnet","setKAUMainnetRes","kauTestnet","setKAUTestnetRes","kagMainnet","setKAGMainnetRes","kagTestnet","setKAGTestnetRes","kaumainnet","kautestnet","kagmainnet","kagtestnet","theme","global","colors","brand","font","family","height","App","Grommet","full","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c65d289f.chunk.js","sourcesContent":["import React from 'react'\nimport { Box } from 'grommet'\n\nconst AppBar = (props: any) => (\n  <Box\n    tag='header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='brand'\n    pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n    elevation='medium'\n    style={{ zIndex: '1' }}\n    {...props}\n  />\n);\n\nexport default AppBar","async function request (url: string, option?:any) : Promise<{detail: string, status: number}> {\n  try {\n    const res = await fetch(url, option)\n    try {\n      if (res.status === 200) {\n        const result = await res.json()\n        return { detail: JSON.stringify(result), status: 1 }\n      } else {\n        const detail = await res.text()\n        return { detail, status: 1 }\n      }\n    } catch (error) {\n      return { detail: \"convert to text error\", status: 2 }\n    }\n  } catch(error) {\n    return { detail: error.toString(), status: 2 }\n  }\n}\n\nexport default request","import request from './request';\n\nconst pre = 'https://cors-anywhere.herokuapp.com/';\n\nconsole.log(`using cors proxy ${pre}`)\n\nexport async function getBalanceBlockInfo(address: string) {\n  const url = `${pre}https://blockchain.info/multiaddr?active=${address}`;\n  return await request(url);\n}\n\nexport async function getBalanceOwnNode(address: string) {\n  const init = {\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      authKey: process.env.REACT_APP_CBX_PROXY_KEY,\n    },\n  };\n  const url = `https://route.cbx.io/api/proxy/btc/addr/${address}`;\n  return await request(url, init);\n}\n\nexport async function getUSDTBalance(address: string) {\n  const paramStr = `addr=${address}`;\n  const init = {\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    method: 'POST',\n    body: paramStr,\n  };\n  const url = `https://api.omniexplorer.info/v2/address/addr/`;\n  return await request(url, init);\n}\n","import React from 'react'\n\nimport * as types from '../types'\n\nimport { Text, Heading } from 'grommet'\n\nfunction StatusTitle({ status, detail }: types.status) {\n  return (\n    status === 0\n      ? <Heading textAlign=\"center\" level={3} color=\"#FFCA58\"> {detail} </Heading> // waiting\n      : status === 1\n        ? <Heading textAlign=\"center\" level={3} color=\"#00C781\"> {detail} </Heading> // success\n        : <Heading textAlign=\"center\" level={3} color=\"#FF4040\"> {detail} </Heading> // failed\n  )\n}\n\nfunction StatusText({ status, detail }: types.status) {\n  return (\n    status === 0\n      ? <Text color=\"#FFCA58\"> {detail} </Text> // waiting\n      : status === 1\n        ? <Text color=\"#00C781\"> {detail} </Text> // success\n        : <Text color=\"#FF4040\"> {detail} </Text> // failed\n  )\n}\n\nexport { StatusText, StatusTitle }","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextInput, TextArea } from 'grommet'\n\nimport { getBalanceBlockInfo, getBalanceOwnNode, getUSDTBalance } from '../apis/bitcoin'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction BTCCheck() {\n\n  const [address, setaddress] = useState(\"32GW31BBrRyEUoga6etp4dCmxNDACyBqKa\")\n  const [status, setStatus] = useState(0)\n\n  const [blockchainInfoRes, setBlockchainInfoRes] = useState<types.status>({ status: 0, detail: '' })\n  const [cbxNodeRes, setCBXNodeRes] = useState<types.status>({ status: 0, detail: '' })\n  const [omniRes, setOmniRes] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [blockInfo, cbxNode, omniData] = await Promise.all([\n      getBalanceBlockInfo(address),\n      getBalanceOwnNode(address),\n      getUSDTBalance(address)\n    ])\n\n    if (!isCanceled) {\n      setBlockchainInfoRes(blockInfo)\n      setCBXNodeRes(cbxNode)\n      setOmniRes(omniData)\n      if (blockInfo.status === 1 && cbxNode.status === 1 && omniData.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Bitcoin API\" />}>\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={blockchainInfoRes.status} detail=\"Blockchain Info API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={blockchainInfoRes.detail} />\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={cbxNodeRes.status} detail=\"CoolBitX Electrum API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={cbxNodeRes.detail} />\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={omniRes.status} detail=\"Omni API USDT Balance\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={omniRes.detail} />\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n\n  )\n}\n\nexport default BTCCheck","import request from './request'\n\nexport async function getBalanceCoinSpace (address: string) {\n  const url = `https://ltc.coin.space/api/addrs/${address}`\n  return await request(url)\n}\n\nexport async function getBalanceOwnNode (address: string) {\n  const init = {\n    headers: {\n      'Content-Type': 'application/json',\n\t\t\tAccept: 'application/json',\n\t\t\tauthKey: process.env.REACT_APP_CBX_PROXY_KEY,\n    }\n  }\n  const url = `https://route.cbx.io/api/proxy/litcoin/addr/${address}`\n  return await request(url, init)\n}","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalanceCoinSpace, getBalanceOwnNode } from '../apis/litecoin'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction LTCCheck() {\n\n  const [address, setaddress] = useState(\"MKRHkR17wKzCHSjZxCbbeeEJ1gTcNpfzXj\")\n  const [status, setStatus] = useState(0)\n\n  const [coinSpaceRes, setCoinSpaceRes] = useState<types.status>({ status: 0, detail: '' })\n  const [cbxNodeRes, setCBXNodeRes] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [coinSpaceRes, cbxNode] = await Promise.all([\n      getBalanceCoinSpace(address),\n      getBalanceOwnNode(address)\n    ])\n\n    if (!isCanceled) {\n      setCoinSpaceRes(coinSpaceRes)\n      setCBXNodeRes(cbxNode)\n      if (coinSpaceRes.status === 1 && cbxNode.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Litecoin API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={coinSpaceRes.status} detail=\"Coin.Space API\" />}>\n              <Box pad=\"small\">\n                <TextArea value={coinSpaceRes.detail} disabled />\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={cbxNodeRes.status} detail=\"CoolBitX Electrum API\" />}>\n              <Box pad=\"small\">\n                <TextArea value={cbxNodeRes.detail} disabled />\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default LTCCheck","import request from './request'\n\nexport async function getBalanceEtherscan (address: string) {\n  const url = `https://api.etherscan.io/api?module=account&action=balance&address=${address}&tag=latest&apikey=SZZWK7FDQ6QFAE9UX3M2W52BNM85K7DRZR`\n  return await request(url)\n}\n\nexport async function getBalanceInfura (address: string) {\n  const headers = { 'Content-Type': 'application/json' };\n\tconst method = 'POST';\n\tconst body = {\n\t\tid: 1,\n\t\tjsonrpc: '2.0',\n\t\tmethod: 'eth_getBalance',\n\t\tparams: [address, 'latest'],\n  };\n  const option = { headers, method, body: JSON.stringify(body) };\n  const url = `https://mainnet.infura.io/v3/dd7e77cc740a4a32ab3c94d9a08b90ae`\n  return await request(url, option)\n}","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalanceEtherscan, getBalanceInfura } from '../apis/ethereum'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction ETHCheck() {\n\n  const [address, setaddress] = useState(\"0x9e68b67660c223b3e0634d851f5df821e0e17d84\")\n  const [status, setStatus] = useState(0)\n\n  const [infuraRes, setInfuraRes] = useState<types.status>({ status: 0, detail: '' })\n  const [etherscanRes, setEtherscanRes] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [infuraRes, etherscanRes] = await Promise.all([\n      getBalanceInfura(address),\n      getBalanceEtherscan(address)\n    ])\n\n    if (!isCanceled) {\n      setInfuraRes(infuraRes)\n      setEtherscanRes(etherscanRes)\n      if (infuraRes.status === 1 && etherscanRes.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Ethereum API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={infuraRes.status} detail=\"Infura API\" />}>\n              <Box pad=\"small\">\n                <TextArea value={infuraRes.detail} disabled/>\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={etherscanRes.status} detail=\"Etherscan API\" />}>\n              <Box pad=\"small\">\n                <TextArea value={etherscanRes.detail} disabled/>\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default ETHCheck","import request from './request'\n\nexport async function getBalanceOwnNode (address: string) {\n  const init = {\n    headers: {\n      'Content-Type': 'application/json',\n\t\t\tAccept: 'application/json',\n\t\t\tauthKey: process.env.REACT_APP_CBX_PROXY_KEY,\n    }\n  }\n  const url = `https://route.cbx.io/api/bch/addrs/${address}`\n  return await request(url, init)\n}","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalanceOwnNode } from '../apis/bitcoincash'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction BCHCheck() {\n\n  const [address, setaddress] = useState(\"bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzezc\")\n  const [status, setStatus] = useState(0)\n\n  const [cbxNodeRes, setCBXNodeRes] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [cbxNode] = await Promise.all([\n      getBalanceOwnNode(address)\n    ])\n\n    if (!isCanceled) {\n      setCBXNodeRes(cbxNode)\n      if (cbxNode.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Box>\n      <Accordion>\n        <AccordionPanel label={<StatusTitle status={status} detail=\"BitcoinCash API\" />}>\n\n          <Box pad=\"small\">\n            <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n              setaddress(e.target.value)\n            }\n            } />\n            <br />\n            <Accordion>\n              <AccordionPanel label={<StatusText status={cbxNodeRes.status} detail=\"CoolBitX Electrum API\" />}>\n                <Box pad=\"small\">\n                  <TextArea value={cbxNodeRes.detail} disabled></TextArea>\n                </Box>\n              </AccordionPanel>\n            </Accordion>\n          </Box>\n        </AccordionPanel>\n      </Accordion>\n    </Box>\n  )\n}\n\nexport default BCHCheck","\n\nimport request from './request'\n\nexport async function getBalanceGraphQL (address: string) {\n  const query = `\n    query {\n      account(address: \"${address}\") {\n        xrpBalance,\n      }\n    }\n  `\n  const init = {\n    headers: {\n      authKey: process.env.REACT_APP_CBX_PROXY_KEY,\n      // 'Content-Type': 'application/json',\n\t\t\t// Accept: 'application/json',\n    }\n  }\n  const url = `https://route.cbx.io/api/v2/rippleELBGetApi?query=${encodeURIComponent(query)}`\n  return await request(url, init)\n}","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalanceGraphQL } from '../apis/ripple'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction XRPCheck() {\n\n  const [address, setaddress] = useState(\"r3kmLJN5D28dHuH8vZNUZpMC43pEHpaocV\")\n  const [status, setStatus] = useState(0)\n\n  const [response, setReponse] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [res] = await Promise.all([\n      getBalanceGraphQL(address)\n    ])\n\n    if (!isCanceled) {\n      setReponse(res)\n      if (res.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Ripple API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={response.status} detail=\"CBX GraphQL Node\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={response.detail}></TextArea>\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default XRPCheck","\n// const  IconService = require(\"icon-sdk-js\");\nimport IconService from 'icon-sdk-js';\nconst { IconAmount } = IconService;\nconst walletApi = \"https://wallet.icon.foundation/api/v3\"\nconst httpProvider = new IconService.HttpProvider(walletApi);\nconst iconService = new IconService(httpProvider);\n\nexport async function getBalance (address: string) {\n  try {\n    const loopValue = await iconService.getBalance(address).execute();\n    const balance = IconAmount.of(loopValue, IconAmount.Unit.LOOP)\n    .convertUnit(IconAmount.Unit.ICX)\n    .toString();\n    return { detail: balance, status: 1 }\n  } catch (error) {\n    return { detail: error.toString(), status: 2 }\n  }\n}","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalance } from '../apis/icon'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction ICXCheck() {\n\n  const [address, setaddress] = useState(\"hxc102e44c2fe6bc235d9584d9d5a1b2e3c40d3985\")\n  const [status, setStatus] = useState(0)\n\n  const [response, setResponse] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [result] = await Promise.all([\n      getBalance(address)\n    ])\n\n    if (!isCanceled) {\n      setResponse(result)\n      if (result.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Icon API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={response.status} detail=\"Official API\" />}>\n              <Box pad=\"small\">\n                <TextArea value={response.detail} disabled/>\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default ICXCheck","import request from './request'\n\nexport async function getBalanceBinanceDex (address: string) {\n  const init = {\n    headers: {\n      'Content-Type': 'application/json',\n\t\t\tAccept: 'application/json',\n    }\n  }\n  const url = `https://dex.binance.org/api/v1/account/${address}`\n  return await request(url, init)\n}","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalanceBinanceDex } from '../apis/binance'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction BNBCheck() {\n\n  const [address, setaddress] = useState(\"bnb1jpttcqa6703lv2zcpnq89gs24pw90udvjympg0\")\n  const [status, setStatus] = useState(0)\n\n  const [response, setReponse] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [bnbRes] = await Promise.all([\n      getBalanceBinanceDex(address)\n    ])\n\n    if (!isCanceled) {\n      setReponse(bnbRes)\n      if (bnbRes.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Binance API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={response.status} detail=\"BinanceDex API\" />}>\n              <Box pad=\"small\">\n                <TextArea value={response.detail} disabled/>\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default BNBCheck","import request from './request'\n\nexport async function getBalanceZenSystem (address: string) {\n  const url = `https://explorer.zensystem.io/api/addr/${address}/balance`\n  return await request(url)\n}\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalanceZenSystem } from '../apis/horizen'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction ZENCheck() {\n\n  const [address, setaddress] = useState(\"zsxWnyDbU8pk2Vp98Uvkx5Nh33RFzqnCpWN\")\n  const [status, setStatus] = useState(0)\n\n  const [response, setReponse] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [res] = await Promise.all([\n      getBalanceZenSystem(address)\n    ])\n\n    if (!isCanceled) {\n      setReponse(res)\n      if (res.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Horizen API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={response.status} detail=\"Zen System\" />}>\n              <Box pad=\"small\">\n                <TextArea value={response.detail} disabled />\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default ZENCheck","import { Server, NotFoundError as NotFound } from 'stellar-sdk';\n\n\nexport async function getBalance(address: string, testnet = false) {\n  try {\n    const server = testnet \n      ? new Server(\"https://horizon-testnet.stellar.org\") \n      : new Server(\"https://horizon.stellar.org\");\n    const account = await server.accounts().accountId(address).call();\n    const res = account.balances.find((obj) => {\n      return obj.asset_type === 'native';\n    });\n    return { detail: res?.balance || '0', status: 1 };\n  } catch (err) {\n    if (err instanceof NotFound) {\n      return { detail: '0', status: 1 };\n    } else {\n      return { detail: err.toString(), status: 2 };\n    }\n  }\n}\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalance } from '../apis/stellar'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction XLMCheck() {\n\n  const [address, setaddress] = useState(\"GBLKRATZODTSJNU7XTB5HY5VAAN63CPRT77UYZT2VLCNXE7F3YHSW22M\")\n  const [status, setStatus] = useState(0)\n\n  const [mainnet, setMainnetRes] = useState<types.status>({ status: 0, detail: '' })\n  const [testnet, setTestnetRes] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [mainnet, testnet] = await Promise.all([\n      getBalance(address),\n      getBalance(address, true)\n    ])\n\n    if (!isCanceled) {\n      setMainnetRes(mainnet)\n      setTestnetRes(testnet)\n      if (mainnet.status === 1 && testnet.status === 1 ) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Stellar API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={mainnet.status} detail=\"Mainnet API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={mainnet.detail}/>\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={testnet.status} detail=\"Testnet API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={testnet.detail}/>\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default XLMCheck","// import { Server,  as NotFound } from 'stellar-sdk';\nconst { Server, NotFoundError } = require('js-kinesis-sdk');\n\n// KAU_TEST: {\n//   networkPassphrase: 'Kinesis UAT',\n//   horizonURL: 'https://kau-testnet.kinesisgroup.io',\n// },\n// KAG_TEST: {\n//   networkPassphrase: 'Kinesis KAG UAT',\n//   horizonURL: 'https://kag-testnet.kinesisgroup.io',\n// },\n// KAU: {\n//   networkPassphrase: 'Kinesis Live',\n//   horizonURL: 'https://kau-mainnet.kinesisgroup.io',\n// },\n// KAG: {\n//   networkPassphrase: 'Kinesis KAG Live',\n//   horizonURL: 'https://kag-mainnet.kinesisgroup.io',\n// },\n\nexport async function getKAUBalance(address: string, testnet = false) {\n  const server = testnet\n  ? new Server(\"https://kau-testnet.kinesisgroup.io\") \n  : new Server(\"https://kau-mainnet.kinesisgroup.io\");\n  return getBalance(server, address)\n}\n\nexport async function getKAGBalance(address: string, testnet = false) {\n  const server = testnet \n    ? new Server(\"https://kag-testnet.kinesisgroup.io\") \n    : new Server(\"https://kag-mainnet.kinesisgroup.io\");\n  return getBalance(server, address)\n}\n\n\nasync function getBalance(server, address) {\n  try {\n    \n    const account = await server.accounts().accountId(address).call();\n    const res = account.balances.find((obj) => {\n      return obj.asset_type === 'native';\n    });\n    return { detail: res?.balance || '0', status: 1 };\n  } catch (err) {\n    if (err instanceof NotFoundError) {\n      return { detail: '0', status: 1 };\n    } else {\n      return { detail: err.toString(), status: 2 };\n    }\n  }\n}\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getKAGBalance, getKAUBalance } from '../apis/kinesis'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction XLMCheck() {\n\n  const [address, setaddress] = useState(\"GAOO4W4NHRSUVFPCVUA2BZTAMCJ6O7MBMXMDMUL6XEQ7Q6DBT6UTFD7V\")\n  const [status, setStatus] = useState(0)\n\n  const [kauMainnet, setKAUMainnetRes] = useState<types.status>({ status: 0, detail: '' })\n  const [kauTestnet, setKAUTestnetRes] = useState<types.status>({ status: 0, detail: '' })\n  const [kagMainnet, setKAGMainnetRes] = useState<types.status>({ status: 0, detail: '' })\n  const [kagTestnet, setKAGTestnetRes] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [kaumainnet, kautestnet, kagmainnet, kagtestnet] = await Promise.all([\n      getKAUBalance(address),\n      getKAUBalance(address, true),\n      getKAGBalance(address),\n      getKAGBalance(address, true)\n    ])\n\n    if (!isCanceled) {\n      setKAUMainnetRes(kaumainnet)\n      setKAUTestnetRes(kautestnet)\n      setKAGMainnetRes(kagmainnet)\n      setKAGTestnetRes(kagtestnet)\n      if (kaumainnet.status === 1 && kautestnet.status === 1 && kagmainnet.status === 1 && kagtestnet.status === 1 ) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Kinesis API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={kauMainnet.status} detail=\"KAU Mainnet API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={kauMainnet.detail}/>\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={kauTestnet.status} detail=\"KAU Testnet API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={kauTestnet.detail}/>\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={kagMainnet.status} detail=\"KAG Mainnet API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={kagMainnet.detail}/>\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={kagTestnet.status} detail=\"KAG Testnet API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={kagTestnet.detail}/>\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default XLMCheck","import React from 'react';\n\nimport {\n  Box,\n  Heading,\n  Grommet\n} from 'grommet';\n\nimport AppBar from './component/AppBar'\nimport BTCCheck from './component/BTCCheck'\nimport LTCCheck from './component/LTCCheck'\nimport ETHCheck from './component/ETHCheck'\nimport BCHCheck from './component/BCHCheck'\nimport XRPCheck from './component/XRPCheck'\nimport ICXCheck from './component/ICXCheck'\nimport BNBCheck from './component/BNBCheck'\nimport ZENCheck from './component/ZENCheck'\nimport XLMCheck from './component/XLMCheck'\nimport KAUCheck from './component/KA_Check'\n\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#000099'\n    },\n    font: {\n      family: 'Source+Code+Pro',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\n\n\nfunction App() {\n\n  return (\n    <Grommet theme={theme} full>\n        <AppBar>\n          <Heading level='3'>CoolWalletS API Test</Heading>\n        </AppBar>\n        <Box margin=\"small\">\n        <BTCCheck />\n        <LTCCheck />\n        <ETHCheck />\n        <BCHCheck />\n        <XRPCheck />\n        <ICXCheck />\n        <BNBCheck />\n        <ZENCheck />\n        <XLMCheck />\n        <KAUCheck />\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}