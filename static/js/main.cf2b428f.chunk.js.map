{"version":3,"sources":["component/AppBar.tsx","apis/request.ts","apis/bitcoin.ts","component/APIStatus.tsx","component/BTCCheck.tsx","apis/litecoin.ts","component/LTCCheck.tsx","apis/ethereum.ts","component/ETHCheck.tsx","apis/bitcoincash.ts","component/BCHCheck.tsx","apis/ripple.ts","component/XRPCheck.tsx","apis/icon.ts","component/ICXCheck.tsx","apis/binance.ts","component/BNBCheck.tsx","apis/horizen.ts","component/ZENCheck.tsx","apis/stellar.ts","component/XLMCheck.tsx","apis/kinesis.ts","component/KA_Check.tsx","apis/nodegraphql.ts","component/EndPointCheck.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppBar","props","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","url","option","a","fetch","res","status","json","result","detail","JSON","stringify","text","toString","request","getBalanceBlockInfo","address","getBalanceOwnNode","headers","authKey","process","getUSDTBalance","paramStr","method","body","StatusTitle","Heading","textAlign","level","color","StatusText","Text","BTCCheck","useState","setaddress","setStatus","blockchainInfoRes","setBlockchainInfoRes","cbxNodeRes","setCBXNodeRes","omniRes","setOmniRes","useMemo","isCanceled","Promise","all","blockInfo","cbxNode","omniData","Accordion","AccordionPanel","label","TextInput","size","type","value","onChange","e","target","TextArea","disabled","getBalanceCoinSpace","LTCCheck","coinSpaceRes","setCoinSpaceRes","getBalanceEtherscan","getBalanceInfura","id","jsonrpc","params","ETHCheck","infuraRes","setInfuraRes","etherscanRes","setEtherscanRes","BCHCheck","getBalanceGraphQL","query","encodeURIComponent","XRPCheck","response","setReponse","IconAmount","IconService","httpProvider","HttpProvider","iconService","getBalance","execute","loopValue","balance","of","Unit","LOOP","convertUnit","ICX","ICXCheck","setResponse","getBalanceBinanceDex","Accept","BNBCheck","bnbRes","getBalanceZenSystem","ZENCheck","testnet","server","Server","accounts","accountId","call","account","balances","find","obj","asset_type","NotFound","XLMCheck","mainnet","setMainnetRes","setTestnetRes","require","NotFoundError","getKAUBalance","getKAGBalance","kauMainnet","setKAUMainnetRes","kauTestnet","setKAUTestnetRes","kagMainnet","setKAGMainnetRes","kagTestnet","setKAGTestnetRes","kaumainnet","kautestnet","kagmainnet","kagtestnet","getGraphqlNodeEndpoint","EndPointCheck","prod_env","setProdRes","theme","global","colors","brand","font","family","height","App","Grommet","full","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf2b428f.chunk.js","sourcesContent":["import React from 'react'\nimport { Box } from 'grommet'\n\nconst AppBar = (props: any) => (\n  <Box\n    tag='header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='brand'\n    pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n    elevation='medium'\n    style={{ zIndex: '1' }}\n    {...props}\n  />\n);\n\nexport default AppBar","async function request(url: string, option?: any): Promise<{ detail: string; status: number }> {\n  try {\n    const res = await fetch(url, option);\n    try {\n      if (res.status === 200) {\n        const result = await res.json();\n        return { detail: JSON.stringify(result), status: 1 };\n      } else {\n        const detail = await res.text();\n        return { detail, status: 1 };\n      }\n    } catch (error) {\n      return { detail: 'convert to text error', status: 2 };\n    }\n  } catch (error) {\n    return { detail: error.toString(), status: 2 };\n  }\n}\n\nexport default request;\n","import request from './request';\n\nexport function getBalanceBlockInfo(address: string) {\n  const url = `https://blockchain.info/multiaddr?active=${address}&cors=true`;\n  return request(url);\n}\n\nexport function getBalanceOwnNode(address: string) {\n  const init = {\n    headers: {\n      authKey: process.env.REACT_APP_CBX_PROXY_KEY,\n    },\n  };\n  const url = `https://route.cbx.io/api/proxy/btc/addr/${address}`;\n  return request(url, init);\n}\n\nexport function getUSDTBalance(address: string) {\n  const paramStr = `addr=${address}`;\n  const init = {\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    method: 'POST',\n    body: paramStr,\n  };\n  const url = `https://api.omniexplorer.info/v2/address/addr/`;\n  return request(url, init);\n}\n","import React from 'react'\n\nimport * as types from '../types'\n\nimport { Text, Heading } from 'grommet'\n\nfunction StatusTitle({ status, detail }: types.status) {\n  return (\n    status === 0\n      ? <Heading textAlign=\"center\" level={3} color=\"#FFCA58\"> {detail} </Heading> // waiting\n      : status === 1\n        ? <Heading textAlign=\"center\" level={3} color=\"#00C781\"> {detail} </Heading> // success\n        : <Heading textAlign=\"center\" level={3} color=\"#FF4040\"> {detail} </Heading> // failed\n  )\n}\n\nfunction StatusText({ status, detail }: types.status) {\n  return (\n    status === 0\n      ? <Text color=\"#FFCA58\"> {detail} </Text> // waiting\n      : status === 1\n        ? <Text color=\"#00C781\"> {detail} </Text> // success\n        : <Text color=\"#FF4040\"> {detail} </Text> // failed\n  )\n}\n\nexport { StatusText, StatusTitle }","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextInput, TextArea } from 'grommet'\n\nimport { getBalanceBlockInfo, getBalanceOwnNode, getUSDTBalance } from '../apis/bitcoin'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction BTCCheck() {\n\n  const [address, setaddress] = useState(\"32GW31BBrRyEUoga6etp4dCmxNDACyBqKa\")\n  const [status, setStatus] = useState(0)\n\n  const [blockchainInfoRes, setBlockchainInfoRes] = useState<types.status>({ status: 0, detail: '' })\n  const [cbxNodeRes, setCBXNodeRes] = useState<types.status>({ status: 0, detail: '' })\n  const [omniRes, setOmniRes] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [blockInfo, cbxNode, omniData] = await Promise.all([\n      getBalanceBlockInfo(address),\n      getBalanceOwnNode(address),\n      getUSDTBalance(address)\n    ])\n\n    if (!isCanceled) {\n      setBlockchainInfoRes(blockInfo)\n      setCBXNodeRes(cbxNode)\n      setOmniRes(omniData)\n      if (blockInfo.status === 1 && cbxNode.status === 1 && omniData.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Bitcoin API\" />}>\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={blockchainInfoRes.status} detail=\"Blockchain Info API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={blockchainInfoRes.detail} />\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={cbxNodeRes.status} detail=\"CoolBitX Electrum API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={cbxNodeRes.detail} />\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={omniRes.status} detail=\"Omni API USDT Balance\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={omniRes.detail} />\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n\n  )\n}\n\nexport default BTCCheck","import request from './request';\n\nexport function getBalanceCoinSpace(address: string) {\n  const url = `https://ltc.coin.space/api/addrs/${address}`;\n  return request(url);\n}\n\nexport function getBalanceOwnNode(address: string) {\n  const init = {\n    headers: {\n      authKey: process.env.REACT_APP_CBX_PROXY_KEY,\n    },\n  };\n  const url = `https://route.cbx.io/api/proxy/litcoin/addr/${address}`;\n  return request(url, init);\n}\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalanceCoinSpace, getBalanceOwnNode } from '../apis/litecoin'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction LTCCheck() {\n\n  const [address, setaddress] = useState(\"MKRHkR17wKzCHSjZxCbbeeEJ1gTcNpfzXj\")\n  const [status, setStatus] = useState(0)\n\n  const [coinSpaceRes, setCoinSpaceRes] = useState<types.status>({ status: 0, detail: '' })\n  const [cbxNodeRes, setCBXNodeRes] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [coinSpaceRes, cbxNode] = await Promise.all([\n      getBalanceCoinSpace(address),\n      getBalanceOwnNode(address)\n    ])\n\n    if (!isCanceled) {\n      setCoinSpaceRes(coinSpaceRes)\n      setCBXNodeRes(cbxNode)\n      if (coinSpaceRes.status === 1 && cbxNode.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Litecoin API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={coinSpaceRes.status} detail=\"Coin.Space API\" />}>\n              <Box pad=\"small\">\n                <TextArea value={coinSpaceRes.detail} disabled />\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={cbxNodeRes.status} detail=\"CoolBitX Electrum API\" />}>\n              <Box pad=\"small\">\n                <TextArea value={cbxNodeRes.detail} disabled />\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default LTCCheck","import request from './request';\n\nexport function getBalanceEtherscan(address: string) {\n  const url = `https://api.etherscan.io/api?module=account&action=balance&address=${address}&tag=latest&apikey=SZZWK7FDQ6QFAE9UX3M2W52BNM85K7DRZR`;\n  return request(url);\n}\n\nexport function getBalanceInfura(address: string) {\n  const headers = { 'Content-Type': 'application/json' };\n  const method = 'POST';\n  const body = {\n    id: 1,\n    jsonrpc: '2.0',\n    method: 'eth_getBalance',\n    params: [address, 'latest'],\n  };\n  const option = { headers, method, body: JSON.stringify(body) };\n  const url = `https://mainnet.infura.io/v3/dd7e77cc740a4a32ab3c94d9a08b90ae`;\n  return request(url, option);\n}\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalanceEtherscan, getBalanceInfura } from '../apis/ethereum'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction ETHCheck() {\n\n  const [address, setaddress] = useState(\"0x9e68b67660c223b3e0634d851f5df821e0e17d84\")\n  const [status, setStatus] = useState(0)\n\n  const [infuraRes, setInfuraRes] = useState<types.status>({ status: 0, detail: '' })\n  const [etherscanRes, setEtherscanRes] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [infuraRes, etherscanRes] = await Promise.all([\n      getBalanceInfura(address),\n      getBalanceEtherscan(address)\n    ])\n\n    if (!isCanceled) {\n      setInfuraRes(infuraRes)\n      setEtherscanRes(etherscanRes)\n      if (infuraRes.status === 1 && etherscanRes.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Ethereum API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={infuraRes.status} detail=\"Infura API\" />}>\n              <Box pad=\"small\">\n                <TextArea value={infuraRes.detail} disabled/>\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={etherscanRes.status} detail=\"Etherscan API\" />}>\n              <Box pad=\"small\">\n                <TextArea value={etherscanRes.detail} disabled/>\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default ETHCheck","import request from './request';\n\nexport function getBalanceOwnNode(address: string) {\n  const init = {\n    headers: {\n      authKey: process.env.REACT_APP_CBX_PROXY_KEY,\n    },\n  };\n  const url = `https://route.cbx.io/api/bch/addrs/${address}`;\n  return request(url, init);\n}\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalanceOwnNode } from '../apis/bitcoincash'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction BCHCheck() {\n\n  const [address, setaddress] = useState(\"bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzezc\")\n  const [status, setStatus] = useState(0)\n\n  const [cbxNodeRes, setCBXNodeRes] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [cbxNode] = await Promise.all([\n      getBalanceOwnNode(address)\n    ])\n\n    if (!isCanceled) {\n      setCBXNodeRes(cbxNode)\n      if (cbxNode.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Box>\n      <Accordion>\n        <AccordionPanel label={<StatusTitle status={status} detail=\"BitcoinCash API\" />}>\n\n          <Box pad=\"small\">\n            <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n              setaddress(e.target.value)\n            }\n            } />\n            <br />\n            <Accordion>\n              <AccordionPanel label={<StatusText status={cbxNodeRes.status} detail=\"CoolBitX Electrum API\" />}>\n                <Box pad=\"small\">\n                  <TextArea value={cbxNodeRes.detail} disabled></TextArea>\n                </Box>\n              </AccordionPanel>\n            </Accordion>\n          </Box>\n        </AccordionPanel>\n      </Accordion>\n    </Box>\n  )\n}\n\nexport default BCHCheck","import request from './request';\n\nexport function getBalanceGraphQL(address: string) {\n  const query = `\n    query {\n      account(address: \"${address}\") {\n        xrpBalance,\n      }\n    }\n  `;\n  const init = {\n    headers: {\n      authKey: process.env.REACT_APP_CBX_PROXY_KEY,\n    },\n  };\n  const url = `https://route.cbx.io/api/v2/rippleELBGetApi?query=${encodeURIComponent(query)}`;\n  return request(url, init);\n}\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalanceGraphQL } from '../apis/ripple'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction XRPCheck() {\n\n  const [address, setaddress] = useState(\"r3kmLJN5D28dHuH8vZNUZpMC43pEHpaocV\")\n  const [status, setStatus] = useState(0)\n\n  const [response, setReponse] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [res] = await Promise.all([\n      getBalanceGraphQL(address)\n    ])\n\n    if (!isCanceled) {\n      setReponse(res)\n      if (res.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Ripple API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={response.status} detail=\"CBX GraphQL Node\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={response.detail}></TextArea>\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default XRPCheck","// const  IconService = require(\"icon-sdk-js\");\nimport IconService from 'icon-sdk-js';\nconst { IconAmount } = IconService;\nconst walletApi = 'https://wallet.icon.foundation/api/v3';\nconst httpProvider = new IconService.HttpProvider(walletApi);\nconst iconService = new IconService(httpProvider);\n\nexport async function getBalance(address: string) {\n  try {\n    const loopValue = await iconService.getBalance(address).execute();\n    const balance = IconAmount.of(loopValue, IconAmount.Unit.LOOP)\n      .convertUnit(IconAmount.Unit.ICX)\n      .toString();\n    return { detail: balance, status: 1 };\n  } catch (error) {\n    return { detail: error.toString(), status: 2 };\n  }\n}\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalance } from '../apis/icon'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction ICXCheck() {\n\n  const [address, setaddress] = useState(\"hxc102e44c2fe6bc235d9584d9d5a1b2e3c40d3985\")\n  const [status, setStatus] = useState(0)\n\n  const [response, setResponse] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [result] = await Promise.all([\n      getBalance(address)\n    ])\n\n    if (!isCanceled) {\n      setResponse(result)\n      if (result.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Icon API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={response.status} detail=\"Official API\" />}>\n              <Box pad=\"small\">\n                <TextArea value={response.detail} disabled/>\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default ICXCheck","import request from './request';\n\nexport function getBalanceBinanceDex(address: string) {\n  const init = {\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n  };\n  const url = `https://dex.binance.org/api/v1/account/${address}`;\n  return request(url, init);\n}\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalanceBinanceDex } from '../apis/binance'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction BNBCheck() {\n\n  const [address, setaddress] = useState(\"bnb1jpttcqa6703lv2zcpnq89gs24pw90udvjympg0\")\n  const [status, setStatus] = useState(0)\n\n  const [response, setReponse] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [bnbRes] = await Promise.all([\n      getBalanceBinanceDex(address)\n    ])\n\n    if (!isCanceled) {\n      setReponse(bnbRes)\n      if (bnbRes.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Binance API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={response.status} detail=\"BinanceDex API\" />}>\n              <Box pad=\"small\">\n                <TextArea value={response.detail} disabled/>\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default BNBCheck","import request from './request';\n\nexport function getBalanceZenSystem(address: string) {\n  const url = `https://explorer.zensystem.io/api/addr/${address}/balance`;\n  return request(url);\n}\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalanceZenSystem } from '../apis/horizen'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction ZENCheck() {\n\n  const [address, setaddress] = useState(\"zsxWnyDbU8pk2Vp98Uvkx5Nh33RFzqnCpWN\")\n  const [status, setStatus] = useState(0)\n\n  const [response, setReponse] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [res] = await Promise.all([\n      getBalanceZenSystem(address)\n    ])\n\n    if (!isCanceled) {\n      setReponse(res)\n      if (res.status === 1) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Horizen API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={response.status} detail=\"Zen System\" />}>\n              <Box pad=\"small\">\n                <TextArea value={response.detail} disabled />\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default ZENCheck","import { Server, NotFoundError as NotFound } from 'stellar-sdk';\n\nexport async function getBalance(address: string, testnet = false) {\n  try {\n    const server = testnet\n      ? new Server('https://horizon-testnet.stellar.org')\n      : new Server('https://horizon.stellar.org');\n    const account = await server.accounts().accountId(address).call();\n    const res = account.balances.find((obj) => {\n      return obj.asset_type === 'native';\n    });\n    return { detail: res?.balance || '0', status: 1 };\n  } catch (err) {\n    if (err instanceof NotFound) {\n      return { detail: '0', status: 1 };\n    } else {\n      return { detail: err.toString(), status: 2 };\n    }\n  }\n}\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getBalance } from '../apis/stellar'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction XLMCheck() {\n\n  const [address, setaddress] = useState(\"GBLKRATZODTSJNU7XTB5HY5VAAN63CPRT77UYZT2VLCNXE7F3YHSW22M\")\n  const [status, setStatus] = useState(0)\n\n  const [mainnet, setMainnetRes] = useState<types.status>({ status: 0, detail: '' })\n  const [testnet, setTestnetRes] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [mainnet, testnet] = await Promise.all([\n      getBalance(address),\n      getBalance(address, true)\n    ])\n\n    if (!isCanceled) {\n      setMainnetRes(mainnet)\n      setTestnetRes(testnet)\n      if (mainnet.status === 1 && testnet.status === 1 ) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Stellar API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={mainnet.status} detail=\"Mainnet API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={mainnet.detail}/>\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={testnet.status} detail=\"Testnet API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={testnet.detail}/>\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default XLMCheck","const { Server, NotFoundError } = require('js-kinesis-sdk');\n\nexport async function getKAUBalance(address: string, testnet = false) {\n  const server = testnet\n    ? new Server('https://kau-testnet.kinesisgroup.io')\n    : new Server('https://kau-mainnet.kinesisgroup.io');\n  return getBalance(server, address);\n}\n\nexport async function getKAGBalance(address: string, testnet = false) {\n  const server = testnet\n    ? new Server('https://kag-testnet.kinesisgroup.io')\n    : new Server('https://kag-mainnet.kinesisgroup.io');\n  return getBalance(server, address);\n}\n\nasync function getBalance(server, address) {\n  try {\n    const account = await server.accounts().accountId(address).call();\n    const res = account.balances.find((obj) => {\n      return obj.asset_type === 'native';\n    });\n    return { detail: res?.balance || '0', status: 1 };\n  } catch (err) {\n    if (err instanceof NotFoundError) {\n      return { detail: '0', status: 1 };\n    } else {\n      return { detail: err.toString(), status: 2 };\n    }\n  }\n}\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea, TextInput } from 'grommet'\n\nimport { getKAGBalance, getKAUBalance } from '../apis/kinesis'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction XLMCheck() {\n\n  const [address, setaddress] = useState(\"GAOO4W4NHRSUVFPCVUA2BZTAMCJ6O7MBMXMDMUL6XEQ7Q6DBT6UTFD7V\")\n  const [status, setStatus] = useState(0)\n\n  const [kauMainnet, setKAUMainnetRes] = useState<types.status>({ status: 0, detail: '' })\n  const [kauTestnet, setKAUTestnetRes] = useState<types.status>({ status: 0, detail: '' })\n  const [kagMainnet, setKAGMainnetRes] = useState<types.status>({ status: 0, detail: '' })\n  const [kagTestnet, setKAGTestnetRes] = useState<types.status>({ status: 0, detail: '' })\n\n  useMemo(async () => {\n    setStatus(0)\n    let isCanceled = false\n    if (!address) {\n      return\n    }\n\n    const [kaumainnet, kautestnet, kagmainnet, kagtestnet] = await Promise.all([\n      getKAUBalance(address),\n      getKAUBalance(address, true),\n      getKAGBalance(address),\n      getKAGBalance(address, true)\n    ])\n\n    if (!isCanceled) {\n      setKAUMainnetRes(kaumainnet)\n      setKAUTestnetRes(kautestnet)\n      setKAGMainnetRes(kagmainnet)\n      setKAGTestnetRes(kagtestnet)\n      if (kaumainnet.status === 1 && kautestnet.status === 1 && kagmainnet.status === 1 && kagtestnet.status === 1 ) {\n        setStatus(1)\n      } else {\n        setStatus(2)\n      }\n    }\n\n    return () => {\n      isCanceled = true\n    }\n  }, [address])\n\n\n  return (\n    <Accordion>\n      <AccordionPanel label={<StatusTitle status={status} detail=\"Kinesis API\" />}>\n\n        <Box pad=\"small\">\n          <TextInput size=\"small\" type=\"text\" value={address} onChange={(e) => {\n            setaddress(e.target.value)\n          }\n          } />\n          <br />\n          <Accordion>\n            <AccordionPanel label={<StatusText status={kauMainnet.status} detail=\"KAU Mainnet API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={kauMainnet.detail}/>\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={kauTestnet.status} detail=\"KAU Testnet API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={kauTestnet.detail}/>\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={kagMainnet.status} detail=\"KAG Mainnet API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={kagMainnet.detail}/>\n              </Box>\n            </AccordionPanel>\n            <AccordionPanel label={<StatusText status={kagTestnet.status} detail=\"KAG Testnet API\" />}>\n              <Box pad=\"small\">\n                <TextArea disabled value={kagTestnet.detail}/>\n              </Box>\n            </AccordionPanel>\n          </Accordion>\n        </Box>\n      </AccordionPanel>\n    </Accordion>\n  )\n}\n\nexport default XLMCheck","import request from './request';\n\nexport function getGraphqlNodeEndpoint() {\n   const host =  \"localhost:8080\";\n   const init = {\n     headers: {\n       'Content-Type': 'application/json',\n       Accept: 'application/json',\n     },\n   };\n  const url = `http://${host}/health`;\n  return request(url, init);\n}\n\n\n","import React, { useState, useMemo } from 'react'\n\nimport { Accordion, AccordionPanel, Box, TextArea } from 'grommet'\n\nimport { getGraphqlNodeEndpoint } from '../apis/nodegraphql'\nimport { StatusText, StatusTitle } from './APIStatus'\n\nimport * as types from '../types'\n\nfunction EndPointCheck() {\n    const [status, setStatus] = useState(0)\n    const [prod_env, setProdRes] = useState<types.status>({ status: 0, detail: '' })\n\n    useMemo(async () => {\n        setStatus(0)\n        let isCanceled = false\n\n        const [prod_env] = await Promise.all([\n            getGraphqlNodeEndpoint(),\n        ]);\n    \n        if (!isCanceled) {\n          setProdRes(prod_env);\n          if (prod_env.status === 1) {\n            setStatus(1)\n          } else {\n            setStatus(2)\n          }\n        }\n    \n        return () => {\n          isCanceled = true\n        }\n      }, [])\n\n      return (\n        <Accordion>\n          <AccordionPanel label={<StatusTitle status={status} detail=\"GraphQL EndPoint\" />}>\n            <Box pad=\"small\">\n              <Accordion>\n                <AccordionPanel label={<StatusText status={prod_env.status} detail=\"Production EndPoint\" />}>\n                  <Box pad=\"small\">\n                    <TextArea value={prod_env.detail} disabled/>\n                  </Box>\n                </AccordionPanel>\n              </Accordion>\n            </Box>\n          </AccordionPanel>\n        </Accordion>\n      )\n}\n\nexport default EndPointCheck\n","import React from 'react';\n\nimport {\n  Box,\n  Heading,\n  Grommet\n} from 'grommet';\n\nimport AppBar from './component/AppBar'\nimport BTCCheck from './component/BTCCheck'\nimport LTCCheck from './component/LTCCheck'\nimport ETHCheck from './component/ETHCheck'\nimport BCHCheck from './component/BCHCheck'\nimport XRPCheck from './component/XRPCheck'\nimport ICXCheck from './component/ICXCheck'\nimport BNBCheck from './component/BNBCheck'\nimport ZENCheck from './component/ZENCheck'\nimport XLMCheck from './component/XLMCheck'\nimport KAUCheck from './component/KA_Check'\nimport EndPointCheck from './component/EndPointCheck'\n\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#000099'\n    },\n    font: {\n      family: 'Source+Code+Pro',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\n\n\nfunction App() {\n\n  return (\n    <Grommet theme={theme} full>\n        <AppBar>\n          <Heading level='3'>CoolWalletS API Test</Heading>\n        </AppBar>\n        <Box margin=\"small\">\n        <EndPointCheck/>\n        <BTCCheck />\n        <LTCCheck />\n        <ETHCheck />\n        <BCHCheck />\n        <XRPCheck />\n        <ICXCheck />\n        <BNBCheck />\n        <ZENCheck />\n        <XLMCheck />\n        <KAUCheck />\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}